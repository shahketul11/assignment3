AWSTemplateFormatVersion: '2010-09-09'
Description: Shah Assignment 3 - AWS ECS Fargate Deployment with CI/CD

Parameters:
  GitHubOwner:
    Type: String
    Default: shahketul11
    Description: Your GitHub username
  GitHubRepo:
    Type: String
    Default: assignment3
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch name
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token

Resources:

# --- VPC and Subnets ---
  ShahVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: shah-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ShahVPC
      InternetGatewayId: !Ref InternetGateway

  ShahPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: shah-public-subnet-1

  ShahPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: shah-public-subnet-2

  ShahPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: shah-private-subnet-1

  ShahPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ShahVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: shah-private-subnet-2

# --- Routing ---
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ShahVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPublicSubnet2
      RouteTableId: !Ref PublicRouteTable

    # --- NAT Gateway for Private Subnets ---
  ShahNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ShahNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt ShahNATGatewayEIP.AllocationId
      SubnetId: !Ref ShahPublicSubnet1
      Tags:
        - Key: Name
          Value: shah-nat-gateway

  ShahPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ShahVPC
      Tags:
        - Key: Name
          Value: shah-private-rt

  ShahPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: ShahNATGateway
    Properties:
      RouteTableId: !Ref ShahPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ShahNATGateway

  ShahPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPrivateSubnet1
      RouteTableId: !Ref ShahPrivateRouteTable

  ShahPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ShahPrivateSubnet2
      RouteTableId: !Ref ShahPrivateRouteTable

# --- ECS Cluster ---
  ShahECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: shah-cluster

# --- IAM Role for ECS Task Execution ---
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: shah-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

# --- ALB and Target Group ---
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: shah-alb
      Subnets:
        - !Ref ShahPublicSubnet1
        - !Ref ShahPublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP
      VpcId: !Ref ShahVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: shah-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ShahVPC
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

# --- ECS Task Definition ---
  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: shah-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: 484907526019.dkr.ecr.us-east-1.amazonaws.com/shah-repo:latest
          PortMappings:
            - ContainerPort: 80
          Essential: true

# --- Security Group for ECS Tasks ---
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB
      VpcId: !Ref ShahVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

# --- ECS Service ---
  AppService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ShahECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref AppTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref ShahPrivateSubnet1
            - !Ref ShahPrivateSubnet2
          SecurityGroups:
            - !Ref AppSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: app
          ContainerPort: 80

# IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: shah-codebuild-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: shah-codebuild
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:7.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: IMAGE_TAG
            Value: latest
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 15

# IAM Role for CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: shah-codepipeline-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

# CodePipeline Artifact Bucket
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket

# --- CodePipeline Definition ---
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: shah-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: CodeBuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ShahECSCluster
                ServiceName: !Ref AppService
                FileName: imagedefinitions.json
              RunOrder: 1

# ✅ Outputs block starts here (AFTER Resources block ends)
Outputs:
  LoadBalancerDNS:
    Description: "URL to access your Flask App"
    Value: !GetAtt AppLoadBalancer.DNSName

  PipelineConsoleURL:
    Description: Link to view CodePipeline
    Value: !Sub "https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${CodePipeline}/view"

  